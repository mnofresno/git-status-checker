#!/bin/bash

# Function to check the git status
check_git_status() {
    local dir="$1"
    cd "$dir" || return
    git_status=$(git status --porcelain 2>/dev/null)
    if [[ -z "$git_status" ]]; then
        echo "Clean 0"
    else
        changes=$(echo "$git_status" | wc -l)
        if echo "$git_status" | grep -q "^ M"; then
            echo "Dirty $changes"
        else
            echo "Stagging $changes"
        fi
    fi
}

# Function to get the email of the last commit author
get_last_commit_author_email() {
    local dir="$1"
    cd "$dir" || return
    git log -1 --pretty=format:'%ae'
}

# Function to print the table header
print_header() {
    local target_dir="$1"
    echo "Current state of repos in '$target_dir':"
    echo "+----------------------------+----------------+-----------+----------------------------+"
    echo "| Repository                 | Status         | Changes # | Last Commit Author Email   |"
    echo "+----------------------------+----------------+-----------+----------------------------+"
}

# Function to print a table row
print_row() {
    printf "| %-26s | %-14s | %-9s | %-26s |\n" "$1" "$2" "$3" "$4"
}

# Function to print the table footer
print_footer() {
    echo "+----------------------------+----------------+-----------+----------------------------+"
}

# Main function to find git repos and their statuses
main() {
    local target_dir="$1"
    local clean_count=0
    local dirty_count=0
    local stagging_count=0

    if [[ -z "$target_dir" ]]; then
        echo "No directory specified. Using the current directory ('.') as the target."
        target_dir="."
    fi

    if [[ ! -d "$target_dir" ]]; then
        echo "Error: Directory '$target_dir' does not exist."
        exit 1
    fi

    cd "$target_dir" || exit

    print_header "$target_dir"
    for dir in */ ; do
        if [ -d "$dir/.git" ]; then
            status_info=$(check_git_status "$dir")
            status=$(echo "$status_info" | awk '{print $1}')
            changes=$(echo "$status_info" | awk '{print $2}')
            author_email=$(get_last_commit_author_email "$dir")

            case $status in
                "Clean")
                    clean_count=$((clean_count + 1))
                    ;;
                "Dirty")
                    dirty_count=$((dirty_count + 1))
                    ;;
                "Stagging")
                    stagging_count=$((stagging_count + 1))
                    ;;
            esac

            print_row "${dir%/}" "$status" "$changes" "$author_email"
        fi
    done
    print_footer

    echo
    echo "Summary:"
    echo "+-----------+-------+"
    echo "| Status    | Count |"
    echo "+-----------+-------+"
    printf "| Clean     | %5d |\n" "$clean_count"
    printf "| Dirty     | %5d |\n" "$dirty_count"
    printf "| Stagging  | %5d |\n" "$stagging_count"
    echo "+-----------+-------+"
}

# Run the main function with the specified directory
main "$1"
