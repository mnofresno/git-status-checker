#!/bin/bash

# Function to show help message
show_help() {
    echo "Usage: $0 [DIRECTORY] [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -f [Dirty|Stagging|Clean]  Filter repositories by their status."
    echo "  -h, --help                 Show this help message and exit."
    echo ""
    echo "Examples:"
    echo "  $0 /path/to/repos -f Dirty    Show only repos with Dirty status."
    echo "  $0 /path/to/repos -f Clean    Show only repos with Clean status."
    echo "  $0 /path/to/repos             Show all repos."
}

# Function to check the git status
check_git_status() {
    local dir="$1"
    cd "$dir" || return
    git_status=$(git status --porcelain 2>/dev/null)
    if [[ -z "$git_status" ]]; then
        echo "Clean 0"
    else
        changes=$(echo "$git_status" | wc -l)
        if echo "$git_status" | grep -q "^ M"; then
            echo "Dirty $changes"
        else
            echo "Stagging $changes"
        fi
    fi
}

# Function to get the email of the last commit author
get_last_commit_author_email() {
    local dir="$1"
    cd "$dir" || return

    # Verifica si hay commits en el repositorio
    if git log -1 &>/dev/null; then
        git log -1 --pretty=format:'%ae'
    else
        echo "No commits yet"
    fi
}

# Function to print the table header
print_header() {
    local target_dir="$1"
    echo "Current state of repos in '$target_dir':"
    echo "+----------------------------+----------------+-----------+----------------------------+"
    echo "| Repository                 | Status         | Changes # | Last Commit Author Email   |"
    echo "+----------------------------+----------------+-----------+----------------------------+"
}

# Function to print a table row
print_row() {
    printf "| %-26s | %-14s | %-9s | %-26s |\n" "$1" "$2" "$3" "$4"
}

# Function to print the table footer
print_footer() {
    echo "+----------------------------+----------------+-----------+----------------------------+"
}

# Function to install autocompletion script
install_autocompletion() {
    local autocomplete_script="/etc/bash_completion.d/check_git_status_autocomplete.sh"
    
    if [ ! -f "$autocomplete_script" ]; then
        echo "Installing autocompletion for check_git_status..."
        cat <<EOF | sudo tee "$autocomplete_script" > /dev/null
#!/bin/bash

_check_git_status_autocomplete() {
    local cur opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    opts="-f -h --help Dirty Stagging Clean"

    if [[ \${cur} == -* ]]; then
        COMPREPLY=( \$(compgen -W "\${opts}" -- \${cur}) )
    elif [[ \${COMP_CWORD} -gt 1 && "\${COMP_WORDS[COMP_CWORD-1]}" == "-f" ]]; then
        COMPREPLY=( \$(compgen -W "Dirty Stagging Clean" -- \${cur}) )
    fi

    return 0
}

complete -F _check_git_status_autocomplete check_git_status
EOF
        echo "Autocompletion installed. Reload your shell or run 'source ~/.bashrc' to enable it."
    fi
}

# Main function to find git repos and their statuses
main() {
    local target_dir="$1"
    local filter="$2"
    local clean_count=0
    local dirty_count=0
    local stagging_count=0

    # Install autocompletion if not already installed
    install_autocompletion

    if [[ -z "$target_dir" ]]; then
        echo "No directory specified. Using the current directory ('.') as the target."
        target_dir="."
    fi

    if [[ ! -d "$target_dir" ]]; then
        echo "Error: Directory '$target_dir' does not exist."
        exit 1
    fi

    cd "$target_dir" || exit

    print_header "$target_dir"
    for dir in */ ; do
        if [ -d "$dir/.git" ]; then
            status_info=$(check_git_status "$dir")
            status=$(echo "$status_info" | awk '{print $1}')
            changes=$(echo "$status_info" | awk '{print $2}')
            author_email=$(get_last_commit_author_email "$dir")

            case $status in
                "Clean")
                    clean_count=$((clean_count + 1))
                    ;;
                "Dirty")
                    dirty_count=$((dirty_count + 1))
                    ;;
                "Stagging")
                    stagging_count=$((stagging_count + 1))
                    ;;
            esac

            # Filter based on the provided filter option
            if [[ -z "$filter" || "$filter" == "$status" ]]; then
                print_row "${dir%/}" "$status" "$changes" "$author_email"
            fi
        fi
    done
    print_footer

    echo
    echo "Summary:"
    echo "+-----------+-------+"
    echo "| Status    | Count |"
    echo "+-----------+-------+"
    printf "| Clean     | %5d |\n" "$clean_count"
    printf "| Dirty     | %5d |\n" "$dirty_count"
    printf "| Stagging  | %5d |\n" "$stagging_count"
    echo "+-----------+-------+"
}

# Parse arguments for target directory and options
while getopts ":f:h-:" opt; do
  case ${opt} in
    f )
      filter="$OPTARG"
      ;;
    h )
      show_help
      exit 0
      ;;
    - )
      case "${OPTARG}" in
          help)
            show_help
            exit 0
            ;;
          *)
            echo "Invalid option: --${OPTARG}" 1>&2
            exit 1
            ;;
      esac
      ;;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done

shift $((OPTIND -1))

# Run the main function with the specified directory and filter
main "$1" "$filter"
